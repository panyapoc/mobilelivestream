Description: 'Mobile Live Streaming AWS'
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  ProjectName:
    Description: Project name
    Type: String
    Default: mobilelive

Globals:
  Function:
    Timeout: 180
  Api:
    EndpointConfiguration: REGIONAL
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'*'"
      AllowOrigin: "'*'"

Resources:
# ---------- IAM ROLES FOR SERVIES ---------
  MediaLiveRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: 2012-10-17
          Statement:
            -
              Effect: Allow
              Principal:
                Service:
                  - "medialive.amazonaws.com"
              Action:
                - sts:AssumeRole
        ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'
        # Policies:
        #   -
        #     PolicyName: !Sub "${AWS::StackName}-mediatranscode-role"
        #     PolicyDocument:
        #       Statement:
        #         -
        #           Effect: Allow
        #           Action:
        #             - ssm:DescribeParameters
        #             - ssm:GetParameter
        #             - ssm:GetParameters
        #             - ssm:PutParameter
        #           Resource:
        #             - !Join ["", ["arn:aws:ssm:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":parameter/*"]]
        #         # feature/P20903447 MediaConnect support
        #         -
        #           Effect: Allow
        #           Action:
        #             - mediaconnect:ManagedDescribeFlow
        #             - mediaconnect:ManagedAddOutput
        #             - mediaconnect:ManagedRemoveOutput
        #           Resource:
        #             - !Join ["", ["arn:aws:mediaconnect:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":*"]]

  # TODO: SCOPE ROLE
  LiveStreamLambdaRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ProjectName}-LiveStreamLambdaRole'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'

  LiveStreamArchiveBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${ProjectName}-livestream-archive'

  LiveStreamArchiveOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub "web-access-${LiveStreamArchiveBucket}"

  LiveStreamArchiveBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LiveStreamArchiveBucket
      PolicyDocument:
        Statement:
          - Action:
              - "s3:GetObject"
            Effect: Allow
            Resource: !Join ['',['arn:aws:s3:::',!Ref LiveStreamArchiveBucket,'/*']]
            Principal:
              CanonicalUser: !GetAtt LiveStreamArchiveOriginAccessIdentity.S3CanonicalUserId

  WebCDN:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        DefaultCacheBehavior: # S3 origin is default
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods: # Cache get requests only
            - GET
            - HEAD
            - OPTIONS
          DefaultTTL: 60
          MaxTTL: 60
          ForwardedValues:
            QueryString: true
          TargetOriginId: webstatic
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        Origins:
          -
            # Note: DO NOT use !GetAtt WebBucket.DomainName for DomainName
            # https://stackoverflow.com/q/38735306
            #DomainName: !GetAtt WebBucket.DomainName
            DomainName: !Sub ${LiveStreamArchiveBucket}.s3.amazonaws.com
            Id: webstatic
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${LiveStreamArchiveOriginAccessIdentity}
            OriginPath: /vod
        PriceClass: PriceClass_200
  MediaLiveSecurityGroup:
    Type: AWS::MediaLive::InputSecurityGroup
    Properties:
      WhitelistRules:
        - Cidr: '0.0.0.0/0'

# ---------- Lambda Function ---------
  FunctionAddChannel:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: !Sub '${ProjectName}-FunctionAddChannel'
      Description: GFunctionAddChannel
      Handler: main.handler
      MemorySize: 128
      Runtime: python3.8
      Role: !GetAtt LiveStreamLambdaRole.Arn
      Timeout: 300
      Environment:
        Variables:
          medialive_sg: !Ref MediaLiveSecurityGroup #medialive_sg id
          archive_s3 : !Ref LiveStreamArchiveBucket #archive_s3 bucketname
          medialive_role_arn : !GetAtt .Arn #medialive_role_arn role arn
      CodeUri: ./lambda/api/addChannel/
      Events:
        APIgateway:
          Type: Api
          Properties:
            Path: /addChannel
            Method: post

#   CustomResource:
#     Type: AWS::Lambda::Function
#     Properties:
#       FunctionName: !Sub ${AWS::StackName}-livestream-custom-resources
#       Description: 'Used to deploy custom resources and send AnonymousData'
#       Handler: !If [CodeBase, index.handler, lambda.handler]
#       Role: !GetAtt CustomResourceRole.Arn
#       Code:
#         S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
#         S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"],  !If ["CodeBase", "custom-resource-js.zip", "custom-resource-py.zip"]]]
#       Runtime:  !If [CodeBase, nodejs12.x, python3.8]
#       Timeout: 180

#   MediaPackageChannel:
#     Type: Custom::MediaPackageChannel
#     Properties:
#       ServiceToken: !GetAtt CustomResource.Arn
#       Resource: MediaPackageChannel
#       ChannelId: !Sub ${AWS::StackName}-livestream

#   MediaPackageHlsEndpoint:
#     Type: Custom::MediaPackageHlsEndpoint
#     Properties:
#       ServiceToken: !GetAtt CustomResource.Arn
#       Resource: MediaPackageEndPoint
#       EndPoint: HLS
#       ChannelId: !GetAtt MediaPackageChannel.ChannelId

#   # MediaPackageDashEndpoint:
#   #   Type: Custom::MediaPackageDashEndpoint
#   #   Properties:
#   #     ServiceToken: !GetAtt CustomResource.Arn
#   #     Resource: MediaPackageEndPoint
#   #     EndPoint: DASH
#   #     ChannelId: !GetAtt MediaPackageChannel.ChannelId

#   # MediaPackageMssEndpoint:
#   #   Type: Custom::MediaPackageMssEndpoint
#   #   Properties:
#   #     ServiceToken: !GetAtt CustomResource.Arn
#   #     Resource: MediaPackageEndPoint
#   #     EndPoint: MSS
#   #     ChannelId: !GetAtt MediaPackageChannel.ChannelId

#   # MediaPackageCmafEndpoint:
#   #   Type: Custom::MediaPackageCmafEndpoint
#   #   Properties:
#   #     ServiceToken: !GetAtt CustomResource.Arn
#   #     Resource: MediaPackageEndPoint
#   #     EndPoint: CMAF
#   #     ChannelId: !GetAtt MediaPackageChannel.ChannelId

#   MediaLiveInput:
#     Type: Custom::MediaLiveInput
#     Properties:
#       ServiceToken: !GetAtt CustomResource.Arn
#       Resource: MediaLiveInput
#       StreamName: !Sub ${AWS::StackName}-livestream
#       Type: !Ref InputType
#       Cidr: !Ref InputCIDR
#       PriUrl: !Ref PriPullURL
#       PriUser: !Ref PriPullUser
#       PriPass: !Ref PriPullPass
#       SecUrl: !Ref SecPullURL
#       SecUser: !Ref SecPullUser
#       SecPass: !Ref SecPullPass
#       RoleArn: !GetAtt MediaLiveRole.Arn
#       PriMediaConnectArn: !Ref PriMediaConnectArn
#       SecMediaConnectArn: !Ref SecMediaConnectArn

#   MediaLiveChannel:
#     Type: Custom::MediaLiveChannel
#     Properties:
#       ServiceToken: !GetAtt CustomResource.Arn
#       Resource: MediaLiveChannel
#       Name: !Sub ${AWS::StackName}-livestream
#       Resolution: !Ref InputRes
#       Codec: !Ref InputCodec
#       Role: !GetAtt MediaLiveRole.Arn
#       InputId: !GetAtt MediaLiveInput.Id
#       Type: !Ref InputType
#       MediaPackagePriUrl: !GetAtt MediaPackageChannel.PrimaryUrl
#       MediaPackagePriUser: !GetAtt MediaPackageChannel.PrimaryUser
#       MediaPackageSecUrl: !GetAtt MediaPackageChannel.SecondaryUrl
#       MediaPackageSecUser: !GetAtt MediaPackageChannel.SecondaryUser


# Outputs: